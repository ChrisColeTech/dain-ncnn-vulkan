#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (binding = 0) readonly buffer a_blob { sfp a_blob_data[]; };
layout (binding = 1) readonly buffer b_blob { sfp b_blob_data[]; };
layout (binding = 2) writeonly buffer top_blob { sfp top_blob_data[]; };

layout (push_constant) uniform parameter
{
int w;
int h;
int c;
int cstep;

int outw;
int outh;
int outc;
int outcstep;
} p;

void main()
{
int gx = int(gl_GlobalInvocationID.x);
int gy = int(gl_GlobalInvocationID.y);
int gz = int(gl_GlobalInvocationID.z);

if (gx >= p.outw || gy >= p.outh || gz >= p.outc)
return;

int tj = gz / 9;
int ti = gz % 9;

afp sum = afp(0.f);

int a_offset = (gy + 4) * p.w + gx + 4;
int b_offset = (gy + tj) * p.w + gx + ti;

for (int z = 0; z < p.c; z++)
{
sum += buffer_ld1(a_blob_data, a_offset) * buffer_ld1(b_blob_data, b_offset);

a_offset += p.cstep;
b_offset += p.cstep;
}

sum /= afp(p.c);

const int gi = gz * p.outcstep + gy * p.outw + gx;

buffer_st1(top_blob_data, gi, sum);
}
